#!/usr/bin/env python3

import logging
from GyroBalancer import GyroBalancer


class BALANC3R(GyroBalancer):
    """
    Laurens Valk's BALANC3R
    http://robotsquare.com/2014/06/23/tutorial-building-balanc3r/
    """
    """
% Controller Parameters
% Servo Gain Calculation using Optimal Regulator

dsys = c2d(ss(A1, B1, [0, 0, 0, 0], 0, 0), 0.025);
A_BAR = [dsys.a, zeros(4, 1); C1(1, :) * dsys.a, 1];
B_BAR = [dsys.b; C1(1, :) * dsys.b];
QQ = [
    1, 0, 0, 0, 0
    0, 3e1, 0, 0, 0
    0, 0, 1, 0, 0
    0, 0, 0, 150, 0
    0, 0, 0, 0, 3e1 ];
RR = 1e3 * eye(2);
KK = dlqr(A_BAR, B_BAR, QQ, RR);
% feedback gain
k_f = KK(1, 1:4)
% integral gain
k_i = KK(1, 5)
% suppress velocity gain because it fluctuates NXTway-GS
k_f(3) = k_f(3) * 0.85;
    """
    def __init__(self):
        GyroBalancer.__init__(self, # Q=[1,0,0,0,0;0,1,0,0,0;0,0,1,0,0;0,0,0,1,0;0,0,0,0,4e2],R=1e3*eye(3)でデジタルな方法で算出したゲインを使用
                              gainGyroAngle=30.2153*2.28, #900, # K_F[1]
                              gainGyroRate=3.3269*1.6, #110, # K_F[3]
                              gainMotorAngle=0.1606*2.4, #9, # K_F[0]
                              gainMotorAngularSpeed=1.0796*1.016, # 妥当な係数は8.5〜9.0くらい？ # K_F[2]
                              gainMotorAngleErrorAccumulated=0.4472)#0.0224) #3) # K_I


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)s %(levelname)5s: %(message)s')
    log = logging.getLogger(__name__)

    log.info("Starting BALANC3R")
    robot = BALANC3R()
    robot.main()
    log.info("Exiting BALANC3R")
