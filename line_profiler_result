(snake) mba3:hoge yoshinori$ kernprof -l ~/src/github.com/ETRobocon2017-TeamD/balanc3r-for-ev3way-et/odometry_test.py 
ready
Wrote profile results to odometry_test.py.lprof
(snake) mba3:hoge yoshinori$ python -m line_profiler odometry
odometry.py.lprof       odometry.py.prof        odometry_test.py.lprof  
(snake) mba3:hoge yoshinori$ python -m line_profiler odometry_test.py.lprof
Timer unit: 1e-06 s

Total time: 0.03891 s
File: /Users/yoshinori/src/github.com/ETRobocon2017-TeamD/balanc3r-for-ev3way-et/odometry.py
Function: target_trace at line 45

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    45                                               @profile
    46                                               def target_trace(self, left_angle, right_angle):
    47      1000         1180      1.2      3.0          direction = 0.0
    48      1000          960      1.0      2.5          speed = 0.0
    49                                           
    50                                                   # 前回計測時点との差分を取得
    51      1000         6405      6.4     16.5          cur_dis = self.__get_distance(left_angle, right_angle)        
    52      1000         1461      1.5      3.8          self.__total_distance += cur_dis
    53                                           
    54      1000         2667      2.7      6.9          cur_dir = self.__get_direction()
    55      1000         1523      1.5      3.9          self.__total_direction += cur_dir
    56                                           
    57                                                   # 現在の位置を計算
    58      1000         1950      1.9      5.0          pos_x = self.pre_pos_x + (cur_dis * cos(radians(self.__total_direction))) #進行距離 * cos x
    59      1000         1798      1.8      4.6          pos_y = self.pre_pos_y + (cur_dis * sin(radians(self.__total_direction))) #進行距離 * sin x
    60                                           
    61      1000         1133      1.1      2.9          self.pre_pos_x = pos_x
    62      1000         1062      1.1      2.7          self.pre_pos_y = pos_y
    63                                           
    64                                                   # 目標座標までの方位，距離を格納
    65      1000         1416      1.4      3.6          target_pos_x = self.__target_pos[self.__cur_target_index][0]
    66      1000         1282      1.3      3.3          target_pos_y = self.__target_pos[self.__cur_target_index][1]
    67      1000         3583      3.6      9.2          target_dis = self.__get_target_distance(pos_x, pos_y, target_pos_x, target_pos_y)
    68      1000         4050      4.0     10.4          target_dir = self.__get_target_direction(pos_x, pos_y, target_pos_x, target_pos_y)
    69                                           
    70                                                   #targetとの差分から速度と角度を調整
    71      1000         1265      1.3      3.3          diff_dir = target_dir - self.__total_direction
    72      1000          992      1.0      2.5          direction = diff_dir
    73      1000         1178      1.2      3.0          if direction < -100:
    74       943         1058      1.1      2.7              direction = -100
    75        57           52      0.9      0.1          elif direction > 100:
    76                                                       direction = 100
    77                                           
    78                                                   #TODO:距離に比例してスピードを出すべきか検討
    79                                                   #計測してから
    80      1000         1096      1.1      2.8          speed = self.__RUN_SPEED
    81                                           
    82                                                   #目標に到達していたらindexを進める
    83                                                   #TODO:目標近傍の閾値について検討
    84      1000         1713      1.7      4.4          if abs(target_pos_x - pos_x) < self.__TARGET_AREA_X and abs(target_pos_y - pos_y) < self.__TARGET_AREA_Y:
    85                                                       self.__cur_target_index += 1
    86                                           
    87      1000         1086      1.1      2.8          return speed, direction
