(snake) mba3:hoge yoshinori$ kernprof -l ~/src/github.com/ETRobocon2017-TeamD/balanc3r-for-ev3way-et/odometry_test.py 
ready
Wrote profile results to odometry_test.py.lprof
(snake) mba3:hoge yoshinori$ python -m line_profiler odometry_test.py.lprof
Timer unit: 1e-06 s

Total time: 0.038438 s
File: /Users/yoshinori/src/github.com/ETRobocon2017-TeamD/balanc3r-for-ev3way-et/odometry.py
Function: target_trace at line 44

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                               @profile
    45                                               def target_trace(self, left_angle, right_angle):
    46      1000         1090      1.1      2.8          direction = 0.0
    47      1000          978      1.0      2.5          speed = 0.0
    48                                           
    49                                                   # 前回計測時点との差分を取得
    50      1000         5343      5.3     13.9          cur_dis = self.__get_distance(left_angle, right_angle)        
    51      1000         1448      1.4      3.8          self.__total_distance += cur_dis
    52                                           
    53      1000         2651      2.7      6.9          cur_dir = self.__get_direction()
    54      1000         1391      1.4      3.6          self.__total_direction += cur_dir
    55                                           
    56                                                   # 現在の位置を計算
    57      1000         1967      2.0      5.1          pos_x = self.pre_pos_x + (cur_dis * cos(radians(self.__total_direction))) #進行距離 * cos x
    58      1000         1716      1.7      4.5          pos_y = self.pre_pos_y + (cur_dis * sin(radians(self.__total_direction))) #進行距離 * sin x
    59                                           
    60      1000         1097      1.1      2.9          self.pre_pos_x = pos_x
    61      1000         1078      1.1      2.8          self.pre_pos_y = pos_y
    62                                           
    63                                                   # 目標座標までの方位，距離を格納
    64      1000         1424      1.4      3.7          target_pos_x = self.__target_pos[self.__cur_target_index][0]
    65      1000         1296      1.3      3.4          target_pos_y = self.__target_pos[self.__cur_target_index][1]
    66      1000         4445      4.4     11.6          target_dis = self.__get_target_distance(pos_x, pos_y, target_pos_x, target_pos_y)
    67      1000         4052      4.1     10.5          target_dir = self.__get_target_direction(pos_x, pos_y, target_pos_x, target_pos_y)
    68                                           
    69                                                   #targetとの差分から速度と角度を調整
    70      1000         1278      1.3      3.3          diff_dir = target_dir - self.__total_direction
    71      1000          999      1.0      2.6          direction = diff_dir
    72      1000         1213      1.2      3.2          if direction < -100:
    73       943          964      1.0      2.5              direction = -100
    74        57           95      1.7      0.2          elif direction > 100:
    75                                                       direction = 100
    76                                           
    77                                                   #TODO:距離に比例してスピードを出すべきか検討
    78                                                   #計測してから
    79      1000         1099      1.1      2.9          speed = self.__RUN_SPEED
    80                                           
    81                                                   #目標に到達していたらindexを進める
    82                                                   #TODO:目標近傍の閾値について検討
    83      1000         1720      1.7      4.5          if abs(target_pos_x - pos_x) < self.__TARGET_AREA_X and abs(target_pos_y - pos_y) < self.__TARGET_AREA_Y:
    84                                                       self.__cur_target_index += 1
    85                                           
    86      1000         1094      1.1      2.8          return speed, direction
